{"version":3,"sources":["slider/Item.js","slider/Slider.js","InputWithLabel.js","ResultWithLabel.js","App.js"],"names":["Item","props","isActive","currValue","value","TouchableOpacity","onPress","Text","style","styles","active","inactive","line","StyleSheet","create","textAlign","fontSize","bottom","color","flex","textAlignVertical","fontWeight","Slider","View","column","items","i","push","onChange","min","max","renderScale","container","MultiSlider","trackStyle","backgroundColor","selectedStyle","values","onValuesChange","step","allowOverlap","snapped","justifyContent","alignItems","flexDirection","InputWithLabel","cols","col","label","TextInput","onChangeText","val","parseFloat","input","keyboardType","clearButtonMode","height","margin","borderWidth","padding","flexWrap","width","ResultWithLabel","inputPersist","key","setValue","useState","setUpdated","useEffect","AsyncStorage","getItem","then","itemValue","setItem","App","accountSize","setAccountSize","riskPercent","setRiskPercent","entryPrice","setEntryPrice","slPrice","setSlPrice","tpPrice","setTpPrice","tradeType","posSize","Math","abs","toFixed","posPrice","maxRisk","possGain","riskReward","ScrollView","block","resultsBlock","resultPlaceholder","StatusBar","paddingTop","paddingLeft","paddingRight","inputsBlock","borderColor","marginBottom","marginTop"],"mappings":"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","file":"static/js/app.fb95f60c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet, View, Text, TouchableOpacity } from 'react-native';\n\nexport default function Item(props) {\n    const isActive = function() {\n        return props.currValue == props.value;\n    }\n\n    return (\n        <TouchableOpacity onPress={props.onPress}>\n            <Text style={[ isActive() ? styles.active : styles.inactive]}>{props.value}%</Text>\n            <Text style={[ isActive() ? styles.line : {}]}> { isActive() ? '|' : ''}</Text>\n        </TouchableOpacity>\n    );\n}\n\nconst styles = StyleSheet.create({\n    active:{\n        textAlign: 'center',\n        fontSize: 20,\n        bottom: 10,\n        color:'#5e5e5e',\n    },\n    inactive:{\n        flex: 1,\n        textAlignVertical: 'center',\n        textAlign: 'center',\n        fontWeight:'normal',\n        color:'#bdc3c7',\n    },\n    line:{\n        fontSize: 10,\n        textAlign: 'center',\n    }\n});","import React, { useState } from 'react';\nimport { StyleSheet, Text, View, Dimensions } from 'react-native';\n\nimport MultiSlider from '@ptomasroos/react-native-multi-slider';\nimport Item from './Item';\n\nexport default function Slider(props) {\n    const renderScale = () => {\n        const items = [];\n        for (let i = props.min; i <= props.max; i++) {\n            items.push(\n                <Item \n                    value={i}\n                    currValue={props.value}\n                    key={'slider_scale_item_'+i}\n                    onPress={() => { props.onChange(i) }}\n                />\n            );\n        }\n        return items;\n    }\n     \n    return (\n        <View>\n            <View style={[styles.column]}>\n                {renderScale()}\n            </View>\n            <View style={styles.container}>\n                <MultiSlider\n                    trackStyle={{backgroundColor:'#bdc3c7'}}\n                    selectedStyle={{backgroundColor:\"#5e5e5e\"}}\n                    values={[props.value]}\n                    onValuesChange={values => {\n                        props.onChange(values[0]);\n                    }}\n                    min={props.min}\n                    max={props.max}\n                    step={1}\n                    allowOverlap={false}\n                    snapped={true}\n                />\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    column:{\n        flexDirection:'row',\n        alignItems:'center',\n        justifyContent: 'space-between',\n        bottom:-20,\n    },\n    active:{\n        textAlign: 'center',\n        fontSize:20,\n        color:'#5e5e5e',\n    },\n    inactive:{\n        textAlign: 'center',\n        fontWeight:'normal',\n        color:'#bdc3c7',\n    },\n    line:{\n        textAlign: 'center',\n    }\n});","\nimport React, { useState } from 'react';\nimport { StyleSheet, ScrollView, Text, View, TextInput } from 'react-native';\n\nexport default function InputWithLabel(props) {\n  return (\n    <View style={styles.cols}>\n        <View style={styles.col}>\n          <Text>{props.label}</Text>\n        </View>\n        <View style={styles.col}>\n          <TextInput\n              value={props.value ? ''+props.value : null}\n              onChangeText={(val) => { props.onChange(parseFloat(val)) }}\n              style={styles.input}\n              keyboardType=\"numeric\"\n              clearButtonMode=\"always\"\n          />\n        </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n  },\n  cols: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center'\n  },\n  col: {\n    width: '50%'\n  }\n});\n","\nimport React, { useState } from 'react';\nimport { StyleSheet, ScrollView, Text, View, TextInput } from 'react-native';\n\nexport default function ResultWithLabel(props) {\n  return (\n    <View style={styles.cols}>\n        <View style={styles.col}>\n          <Text>{props.label}</Text>\n        </View>\n        <View style={styles.col}>\n          <Text>{props.value}</Text>\n        </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  cols: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center'\n  },\n  col: {\n    width: '50%'\n  }\n});\n","\nimport React, { useState, useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, ScrollView, Text, View, TextInput } from 'react-native';\nimport AsyncStorage, { useAsyncStorage } from '@react-native-async-storage/async-storage';\n\nimport Slider from './slider/Slider';\nimport InputWithLabel from './InputWithLabel';\nimport ResultWithLabel from './ResultWithLabel';\n\nfunction inputPersist(key, value, setValue) {\n  const [updated, setUpdated] = useState(false);\n\n  function readItem() {\n    AsyncStorage.getItem(key).then(itemValue => setValue(parseFloat(itemValue)));\n  }\n\n  useEffect(readItem, [key, value]);\n\n  function handleChange(input) {\n    AsyncStorage.setItem(key, ''+input);\n    setValue(parseFloat(input));\n    setUpdated(true);\n  }\n\n  return {\n    value,\n    onChange: handleChange\n  };\n}\n\nexport default function App() {\n  const [accountSize, setAccountSize] = useState(1000);\n  const [riskPercent, setRiskPercent] = useState(1);\n  const [entryPrice, setEntryPrice] = useState();\n  const [slPrice, setSlPrice] = useState();\n  const [tpPrice, setTpPrice] = useState();\n\n  const tradeType = slPrice < entryPrice ? 'LONG' : 'SHORT';\n\n  const posSize = parseFloat((Math.abs((accountSize * (riskPercent / 100)) / (entryPrice - slPrice))).toFixed(6));\n  const posPrice = posSize * entryPrice;\n\n  const maxRisk = Math.abs(entryPrice * posSize - slPrice * posSize);\n  const possGain = Math.abs(tpPrice * posSize - entryPrice * posSize);\n  const riskReward = possGain / maxRisk;\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.block}>\n        <InputWithLabel \n          label={\"Account size ($)\"}\n          {...inputPersist('accountSize', accountSize, setAccountSize)} \n        />\n        <InputWithLabel \n          label={\"Risk per trade (%)\"}\n          value={riskPercent}\n          onChange={setRiskPercent}\n        />\n        {riskPercent % 1 === 0 && riskPercent >= 1 && riskPercent <= 5 ? <Slider\n          min={1}\n          max={5}\n          value={riskPercent}\n          onChange={setRiskPercent}\n        /> : null}\n      </View>\n      <View style={styles.block}>\n        <InputWithLabel \n          label={\"Entry\"}\n          {...inputPersist('entryPrice', entryPrice, setEntryPrice)}\n        />\n        <InputWithLabel \n          label={\"Stop loss\"}\n          {...inputPersist('slPrice', slPrice, setSlPrice)}\n        />\n        <InputWithLabel \n          label={\"Take Profit\"}\n          {...inputPersist('tpPrice', tpPrice, setTpPrice)}\n          value={tpPrice}\n        />\n      </View>\n      {accountSize && riskPercent && entryPrice && slPrice && tpPrice ? \n        <View>\n          <View style={styles.block}>\n            <ResultWithLabel \n              label={\"Trade direction\"}\n              value={tradeType} />\n            <ResultWithLabel \n              label={\"Risk/Reward\"}\n              value={riskReward} />\n          </View>\n          <View style={styles.block}>\n            <ResultWithLabel \n              label={\"Max risk ($)\"}\n              value={maxRisk} />\n            <ResultWithLabel \n              label={\"Possible gain ($)\"}\n              value={possGain} />\n          </View>\n          <View style={styles.resultsBlock}>\n            <ResultWithLabel \n              label={\"Position size\"}\n              value={posSize} />\n            <ResultWithLabel \n              label={\"Position size ($)\"}\n              value={posPrice} />\n          </View>\n        </View>\n        : <Text style={styles.resultPlaceholder}>Please enter values.</Text>\n      }\n      <StatusBar style=\"auto\" />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    paddingTop: 50,\n    paddingLeft: 40,\n    paddingRight: 40\n  },\n  inputsBlock: {\n    borderWidth: 1,\n    borderColor: '#333333',\n    marginBottom: 40\n  },\n  block: {\n    marginBottom: 40\n  },\n  resultsBlock: {\n    borderWidth: 1,\n    borderColor: '#333333',\n    marginBottom: 40,\n    backgroundColor: '#f3f3f3',\n    padding: 20\n  },\n  resultPlaceholder : {\n    textAlign: 'center',\n    marginTop: 20,\n    fontWeight: 'bold'\n  }\n});\n"],"sourceRoot":""}